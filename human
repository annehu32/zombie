from Tufts_ble import Sniff, Yell
import uasyncio as asyncio
from machine import Pin, PWM
import time
import neopixel

# ----------------- PIN ASSIGNMENTS ------------------------------
# defining pins that we'll be needing...
# want 3 indicator lights, buzzer, neopixel to indiciate state
buzzer = PWM(Pin('GPIO18', Pin.OUT))  # buzzer
neo = neopixel.NeoPixel(Pin(28), 1)   # neopixel
firstHit = Pin('GPIO1', Pin.OUT)
secondHit = Pin('GPIO5', Pin.OUT)
thirdHit = Pin('GPIO9', Pin.OUT)

# ----------------- TRACKING/FLAG VARS ------------------------------
hit_list = [0] * 13 # List to track our hits
in_range = [0] * 13 # allows us to track who is actively in our radius
isHuman = True # will turn false when get 3 hits from the same number
killedBy = -1 # setting this variable to -1 so that we never mis-read. 

# ----------------- HELPER FUNCTIONS ------------------------------

# # upon zombie entering range, want to check how long they're there
#async def readHit(num):
    # wait 3 seconds
    

# Thinking through the architecture for a human:
    # A human listens for a zombie yelling
    # when a zombie enters range, call function

#----------------- BLUETOOTH FUNCTIONS -----------------------
# largely unchanged from the example code
async def human(): # Central listens - human function
    state = (0,0,10)  # Human = blue
    neo[0] = state
    neo.write()
    c = Sniff('!', verbose = True)
    c.scan(0)   # 0ms = scans forever 
    for i in range(10):
        print('in human loop')
        latest = c.last
        if latest:
            c.last='' # clear the flag for the next advertisement
            print('Got: ' + latest)
        await asyncio.sleep(0.1)
    c.stop_scan()
    

async def zombie(): # Peripheral yells - zombie function
    state = (0,10,0)  # Zombie = green
    neo[0] = state
    neo.write()
    p = Yell()
    while True:    # Zombie will yell and yell and yell
        p.advertise(f'!{killedBy}')
        print('in zombie loop')
        await asyncio.sleep(0.1)

# ----------------- MAIN CODE ------------------------------
# Main function will run sequentially
async def main():   
    await human()
    await zombie()

# Setting up the asyncio event loop
loop = asyncio.get_event_loop()
print('loop created')
loop.run_until_complete(main())
loop.close()
