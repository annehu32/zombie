from Tufts_ble import Sniff, Yell
import uasyncio as asyncio
from machine import Pin, PWM
import time
import neopixel


# ------------------------ MQTT THINGS ---------------------------
import network
from mqtt import MQTTClient
#ssid = 'Tufts_Robot'
#password = ''


mqtt_broker = 'broker.hivemq.com'
port = 1883
topic_sub = 'ME35-24/shorties'

def connect_wifi():
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    wlan.connect(ssid, password)
    while not wlan.isconnected():
        time.sleep(1)

def send_message(msg):
    print('PUBLISHING TO SHORTIES')
    if mqtt_pub_client is None:
        mqtt_pub_client = MQTTClient('ME35_chris_pub',mqtt_broker, port, keepalive=60)
        mqtt_pub_client.connect()
    mqtt_pub_client.publish(topic_pub,msg)
    print(f"Message'{msg}' sent to topic '{topic_pub}'")
    await time.sleep(0.1)
    mqtt_pub_client.disconnect()
    mqtt_pub_client = None

# ----------------- PIN ASSIGNMENTS ------------------------------
# defining pins that we'll be needing...
# want 3 indicator lights, buzzer, neopixel to indicate state
buzzer = PWM(Pin('GPIO18', Pin.OUT))  # buzzer
neo = neopixel.NeoPixel(Pin(28), 1)   # neopixel
firstHit = Pin('GPIO9', Pin.OUT)
secondHit = Pin('GPIO5', Pin.OUT)
thirdHit = Pin('GPIO1', Pin.OUT)
zombieNear = Pin('GPIO13', Pin.OUT)
button = Pin('GPIO20', Pin.IN)

# ----------------- TRACKING/FLAG VARS ------------------------------
hit_list = [0] * 13  # List to track our hits
in_range = [0] * 13  # Allows us to track who is actively in our radius
isHuman = True  # Will turn false when getting 3 hits from the same number
killedBy = -1  # Setting this variable to -1 so that we never mis-read
hitRange = -60  # Adjustable range
yell = True


# ----------------- HELPER FUNCTIONS ------------------------------

# Buzzer beeps and green light goes off
async def alert(val):
    global buzzer
    global firstHit
    global secondHit
    global thirdHit
    global zombieNear
    global hit_list
    
    zombieNear.on()

    buzzer.freq(440)
    buzzer.duty_u16(1000)
    await asyncio.sleep(0.3)
    buzzer.duty_u16(0)
    
    if hit_list[val -1] == 1:
        firstHit.on()
    elif hit_list[val-1] == 2:
        secondHit.on()
    await asyncio.sleep(3)
    zombieNear.off()
    firstHit.off()
    secondHit.off()
    
    

# Upon zombie entering range, check how long they're there
c = Sniff('!', verbose=True)

async def read_hit():
    global c
    global in_range
    global isHuman
    global hit_list
    global killedBy

    latest = c.last
    if latest and len(latest) > 1:  # Ensure latest and latest[1] exist
        val = int(latest[1])
        print('in read hit: ' + str(latest[1]))
        await alert()  # Alerts the human that zombie has entered range

        # Wait 3 seconds and re-check for zombie
        await asyncio.sleep(3)
        if in_range[val-1] == 1:  # Check if still in range
            c.last = ''  # Clear the flag for the next advertisement
            print('additional hit by ' + str(val))
            hit_list[val-1] += 1
            print(hit_list)
            await asyncio.sleep_ms(10)
        if hit_list[val-1] >= 3 and not (val == 2): # preventing ourselves from tagging ourselves
            killedBy = val
            print('Got zombied by: ' + str(val))
            send_message('zombied by : '+ str(val))
            isHuman = False  # Transition to zombie state
            await asyncio.sleep_ms(10)
    else:
        print("No valid latest data found")


def testLEDs():
    firstHit.on()
    time.sleep(1)
    secondHit.on()
    time.sleep(1)
    thirdHit.on()
    time.sleep(1)
    zombieNear.on()
    time.sleep(1)
    firstHit.off()
    secondHit.off()
    thirdHit.off()
    zombieNear.off()
        

#----------------- BLUETOOTH FUNCTIONS -----------------------

def inRange(num):
    in_range[num-1] = 1

def outRange(num):
    in_range[num-1] = 0

async def human():  # Central listens - human function
    global hitRange
    state = (0, 0, 10)  # Human = blue
    neo[0] = state
    neo.write()

    try:
        c.scan(0)  # 0ms = scans forever
        while isHuman:
            latest = c.last
            if latest and len(latest) > 1:  # Ensure latest and latest[1] exist
                dist = c.getRSSI()
                if dist > hitRange:
                    print(str(latest[1]) + ' in range')
                    inRange(int(latest[1]))
                    await read_hit()  # Call to read_hit function
                elif dist < hitRange:
                    print(str(latest[1]) + ' out of range')
                    outRange(int(latest[1]))
                c.last = ''  # Clear the flag for the next advertisement
            await asyncio.sleep(0.1)
        c.stop_scan()
    except Exception as e:
        print(f"Error in human(): {e}")
        c.stop_scan()
    finally:
        print("Human function completed, resetting machine.")        
        

async def toggleButton():
    global yell
    if yell:
        print('----- in button.toggleButton, turning yelling OFF ------')
        yell = False

    else:
        print('----- in button.toggleButton, turning yelling ON ------')
        yell = True

async def readPress():
    global button
    print('-----handle_button called -------')
    while True:
        if button.value() != 1:
            time.sleep(0.1)
            if button.value() != 1:
                await toggleButton()
        await asyncio.sleep(0.01)

async def scream():
    global buzzer
    global yell
    
    if yell:
        buzzer.freq(440)
        buzzer.duty_u16(1000)
        await asyncio.sleep(0.1)
        buzzer.duty_u16(0)


async def zombie(): # Peripheral yells - zombie function
    global neo
    state = (0,10,0)  # Zombie = green
    neo[0] = state
    neo.write()
    p = Yell()
    while True:    # Zombie will yell and yell and yell
        p.advertise(f'!2')
        print('in zombie loop')
        #await scream()
        await asyncio.sleep(0.1)

# ----------------- MAIN CODE ------------------------------

#client = MQTTClient('ME35_chris', mqtt_broker, port, keepalive=60)
#client.connect()

# Main function will run sequentially
async def main():
    asyncio.create_task(readPress())
    human_task = asyncio.create_task(human())  # Create task for human() and run it in parallel
    while isHuman:
        await asyncio.sleep(0.1)  # Keep waiting until isHuman becomes False

    human_task.cancel()  # Cancel human task when human state ends (not strictly needed but cleaner)
    await zombie()  # Start zombie function immediately after human

# Setting up the asyncio event loop
connect_wifi()
loop = asyncio.get_event_loop()
print('loop created')
loop.run_until_complete(main())
loop.close()
